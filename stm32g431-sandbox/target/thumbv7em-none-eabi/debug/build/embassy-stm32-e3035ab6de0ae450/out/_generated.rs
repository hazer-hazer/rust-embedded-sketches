embassy_hal_internal :: peripherals_definition ! (ADC1 , ADC2 , ADC3 , ADC_COMMON , CORDIC , CRC , CRS , DAC1 , DAC3 , DBGMCU , DMA1 , DMA2 , DMAMUX1 , FDCAN1 , FDCAN2 , FDCANRAM1 , FDCANRAM2 , FLASH , FMAC , PA0 , PA1 , PA2 , PA3 , PA4 , PA5 , PA6 , PA7 , PA8 , PA9 , PA10 , PA11 , PA12 , PA13 , PA14 , PA15 , PB0 , PB1 , PB2 , PB3 , PB4 , PB5 , PB6 , PB7 , PB8 , PB9 , PB10 , PB11 , PB12 , PB13 , PB14 , PB15 , PC0 , PC1 , PC2 , PC3 , PC4 , PC5 , PC6 , PC7 , PC8 , PC9 , PC10 , PC11 , PC12 , PC13 , PC14 , PC15 , PD0 , PD1 , PD2 , PD3 , PD4 , PD5 , PD6 , PD7 , PD8 , PD9 , PD10 , PD11 , PD12 , PD13 , PD14 , PD15 , PE0 , PE1 , PE2 , PE3 , PE4 , PE5 , PE6 , PE7 , PE8 , PE9 , PE10 , PE11 , PE12 , PE13 , PE14 , PE15 , PF0 , PF1 , PF2 , PF3 , PF4 , PF5 , PF6 , PF7 , PF8 , PF9 , PF10 , PF11 , PF12 , PF13 , PF14 , PF15 , PG0 , PG1 , PG2 , PG3 , PG4 , PG5 , PG6 , PG7 , PG8 , PG9 , PG10 , PG11 , PG12 , PG13 , PG14 , PG15 , I2C1 , I2C2 , I2C3 , IWDG , LPUART1 , OPAMP1 , OPAMP2 , OPAMP3 , OPAMP6 , PWR , QUADSPI1 , MCO , RCC , RNG , RTC , SAI1 , SPI1 , SPI2 , SPI3 , SYSCFG , TAMP , TIM1 , TIM15 , TIM16 , TIM17 , TIM2 , TIM20 , TIM3 , TIM4 , TIM6 , TIM7 , TIM8 , UART4 , UART5 , UCPD1 , UID , USART1 , USART2 , USART3 , USB , USBRAM , WWDG , EXTI0 , EXTI1 , EXTI2 , EXTI3 , EXTI4 , EXTI5 , EXTI6 , EXTI7 , EXTI8 , EXTI9 , EXTI10 , EXTI11 , EXTI12 , EXTI13 , EXTI14 , EXTI15 , DMA1_CH1 , DMA1_CH2 , DMA1_CH3 , DMA1_CH4 , DMA1_CH5 , DMA1_CH6 , DMA1_CH7 , DMA1_CH8 , DMA2_CH1 , DMA2_CH2 , DMA2_CH3 , DMA2_CH4 , DMA2_CH5 , DMA2_CH6 , DMA2_CH7 , DMA2_CH8) ; embassy_hal_internal :: peripherals_struct ! (ADC1 , ADC2 , ADC3 , ADC_COMMON , CORDIC , CRC , CRS , DAC1 , DAC3 , DBGMCU , DMA1 , DMA2 , DMAMUX1 , FDCAN1 , FDCAN2 , FDCANRAM1 , FDCANRAM2 , FLASH , FMAC , PA0 , PA1 , PA2 , PA3 , PA4 , PA5 , PA6 , PA7 , PA8 , PA9 , PA10 , PA11 , PA12 , PA13 , PA14 , PA15 , PB0 , PB1 , PB2 , PB3 , PB4 , PB5 , PB6 , PB7 , PB8 , PB9 , PB10 , PB11 , PB12 , PB13 , PB14 , PB15 , PC0 , PC1 , PC2 , PC3 , PC4 , PC5 , PC6 , PC7 , PC8 , PC9 , PC10 , PC11 , PC12 , PC13 , PC14 , PC15 , PD0 , PD1 , PD2 , PD3 , PD4 , PD5 , PD6 , PD7 , PD8 , PD9 , PD10 , PD11 , PD12 , PD13 , PD14 , PD15 , PE0 , PE1 , PE2 , PE3 , PE4 , PE5 , PE6 , PE7 , PE8 , PE9 , PE10 , PE11 , PE12 , PE13 , PE14 , PE15 , PF0 , PF1 , PF2 , PF3 , PF4 , PF5 , PF6 , PF7 , PF8 , PF9 , PF10 , PF11 , PF12 , PF13 , PF14 , PF15 , PG0 , PG1 , PG2 , PG3 , PG4 , PG5 , PG6 , PG7 , PG8 , PG9 , PG10 , PG11 , PG12 , PG13 , PG14 , PG15 , I2C1 , I2C2 , I2C3 , IWDG , LPUART1 , OPAMP1 , OPAMP2 , OPAMP3 , OPAMP6 , PWR , QUADSPI1 , MCO , RCC , RNG , RTC , SAI1 , SPI1 , SPI2 , SPI3 , SYSCFG , TAMP , TIM1 , TIM15 , TIM16 , TIM17 , TIM20 , TIM3 , TIM4 , TIM6 , TIM7 , TIM8 , UART4 , UART5 , UCPD1 , UID , USART1 , USART2 , USART3 , USB , USBRAM , WWDG , EXTI0 , EXTI1 , EXTI2 , EXTI3 , EXTI4 , EXTI5 , EXTI6 , EXTI7 , EXTI8 , EXTI9 , EXTI10 , EXTI11 , EXTI12 , EXTI13 , EXTI14 , EXTI15 , DMA1_CH1 , DMA1_CH2 , DMA1_CH3 , DMA1_CH4 , DMA1_CH5 , DMA1_CH6 , DMA1_CH7 , DMA1_CH8 , DMA2_CH1 , DMA2_CH2 , DMA2_CH3 , DMA2_CH4 , DMA2_CH5 , DMA2_CH6 , DMA2_CH7 , DMA2_CH8) ; embassy_hal_internal :: interrupt_mod ! (WWDG , PVD_PVM , RTC_TAMP_LSECSS , RTC_WKUP , FLASH , RCC , EXTI0 , EXTI1 , EXTI2 , EXTI3 , EXTI4 , DMA1_CHANNEL1 , DMA1_CHANNEL2 , DMA1_CHANNEL3 , DMA1_CHANNEL4 , DMA1_CHANNEL5 , DMA1_CHANNEL6 , DMA1_CHANNEL7 , ADC1_2 , USB_HP , USB_LP , FDCAN1_IT0 , FDCAN1_IT1 , EXTI9_5 , TIM1_BRK_TIM15 , TIM1_UP_TIM16 , TIM1_TRG_COM_TIM17 , TIM1_CC , TIM2 , TIM3 , TIM4 , I2C1_EV , I2C1_ER , I2C2_EV , I2C2_ER , SPI1 , SPI2 , USART1 , USART2 , USART3 , EXTI15_10 , RTC_ALARM , USBWAKEUP , TIM8_BRK , TIM8_UP , TIM8_TRG_COM , TIM8_CC , ADC3 , LPTIM1 , SPI3 , UART4 , UART5 , TIM6_DAC , TIM7 , DMA2_CHANNEL1 , DMA2_CHANNEL2 , DMA2_CHANNEL3 , DMA2_CHANNEL4 , DMA2_CHANNEL5 , UCPD1 , COMP1_2_3 , COMP4 , CRS , SAI1 , TIM20_BRK , TIM20_UP , TIM20_TRG_COM , TIM20_CC , FPU , FDCAN2_IT0 , FDCAN2_IT1 , RNG , LPUART1 , I2C3_EV , I2C3_ER , DMAMUX_OVR , QUADSPI , DMA1_CHANNEL8 , DMA2_CHANNEL6 , DMA2_CHANNEL7 , DMA2_CHANNEL8 , CORDIC , FMAC ,) ; pub const MAX_ERASE_SIZE : usize = 2048u32 as usize ; pub mod flash_regions { pub const BANK1_REGION : crate :: flash :: FlashRegion = crate :: flash :: FlashRegion { bank : crate :: flash :: FlashBank :: Bank1 , base : 134217728u32 , size : 524288u32 , erase_size : 2048u32 , write_size : 16u32 , erase_value : 255u8 , _ensure_internal : () , } ; # [cfg (flash)] pub struct Bank1Region < 'd , MODE = crate :: flash :: Async > (pub & 'static crate :: flash :: FlashRegion , pub (crate) embassy_hal_internal :: PeripheralRef < 'd , crate :: peripherals :: FLASH > , pub (crate) core :: marker :: PhantomData < MODE >) ; # [cfg (flash)] pub struct FlashLayout < 'd , MODE = crate :: flash :: Async > { pub bank1_region : Bank1Region < 'd , MODE > , _mode : core :: marker :: PhantomData < MODE > , } # [cfg (flash)] impl < 'd , MODE > FlashLayout < 'd , MODE > { pub (crate) fn new (p : embassy_hal_internal :: PeripheralRef < 'd , crate :: peripherals :: FLASH >) -> Self { Self { bank1_region : Bank1Region (& BANK1_REGION , unsafe { p . clone_unchecked () } , core :: marker :: PhantomData) , _mode : core :: marker :: PhantomData , } } } pub const FLASH_REGIONS : [& crate :: flash :: FlashRegion ; 1usize] = [& BANK1_REGION] ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA1_CHANNEL1 () { < crate :: peripherals :: DMA1_CH1 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA1_CHANNEL2 () { < crate :: peripherals :: DMA1_CH2 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA1_CHANNEL3 () { < crate :: peripherals :: DMA1_CH3 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA1_CHANNEL4 () { < crate :: peripherals :: DMA1_CH4 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA1_CHANNEL5 () { < crate :: peripherals :: DMA1_CH5 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA1_CHANNEL6 () { < crate :: peripherals :: DMA1_CH6 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA1_CHANNEL7 () { < crate :: peripherals :: DMA1_CH7 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA1_CHANNEL8 () { < crate :: peripherals :: DMA1_CH8 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA2_CHANNEL1 () { < crate :: peripherals :: DMA2_CH1 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA2_CHANNEL2 () { < crate :: peripherals :: DMA2_CH2 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA2_CHANNEL3 () { < crate :: peripherals :: DMA2_CH3 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA2_CHANNEL4 () { < crate :: peripherals :: DMA2_CH4 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA2_CHANNEL5 () { < crate :: peripherals :: DMA2_CH5 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA2_CHANNEL6 () { < crate :: peripherals :: DMA2_CH6 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA2_CHANNEL7 () { < crate :: peripherals :: DMA2_CH7 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } # [cfg (feature = "rt")] # [crate :: interrupt] unsafe fn DMA2_CHANNEL8 () { < crate :: peripherals :: DMA2_CH8 as crate :: dma :: bdma :: sealed :: Channel > :: on_irq () ; } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: ADC1 { fn frequency () -> crate :: time :: Hertz { use crate :: pac :: rcc :: vals :: Adcsel ; # [allow (unreachable_patterns)] match crate :: pac :: RCC . ccipr () . read () . adc12sel () { Adcsel :: PLL1_P => unsafe { crate :: rcc :: get_freqs () . pll1_p . unwrap () } , Adcsel :: SYS => unsafe { crate :: rcc :: get_freqs () . sys } , _ => unreachable ! () , } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: AHB2ENR_ADC12EN += 1 } ; if unsafe { refcount_statics :: AHB2ENR_ADC12EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_adc12en (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_adc12rst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_adc12rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: AHB2ENR_ADC12EN -= 1 } ; if unsafe { refcount_statics :: AHB2ENR_ADC12EN } > 0 { return ; } crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_adc12en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: ADC1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: ADC2 { fn frequency () -> crate :: time :: Hertz { use crate :: pac :: rcc :: vals :: Adcsel ; # [allow (unreachable_patterns)] match crate :: pac :: RCC . ccipr () . read () . adc12sel () { Adcsel :: PLL1_P => unsafe { crate :: rcc :: get_freqs () . pll1_p . unwrap () } , Adcsel :: SYS => unsafe { crate :: rcc :: get_freqs () . sys } , _ => unreachable ! () , } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: AHB2ENR_ADC12EN += 1 } ; if unsafe { refcount_statics :: AHB2ENR_ADC12EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_adc12en (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_adc12rst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_adc12rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: AHB2ENR_ADC12EN -= 1 } ; if unsafe { refcount_statics :: AHB2ENR_ADC12EN } > 0 { return ; } crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_adc12en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: ADC2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: ADC3 { fn frequency () -> crate :: time :: Hertz { use crate :: pac :: rcc :: vals :: Adcsel ; # [allow (unreachable_patterns)] match crate :: pac :: RCC . ccipr () . read () . adc345sel () { Adcsel :: PLL1_P => unsafe { crate :: rcc :: get_freqs () . pll1_p . unwrap () } , Adcsel :: SYS => unsafe { crate :: rcc :: get_freqs () . sys } , _ => unreachable ! () , } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: AHB2ENR_ADC345EN += 1 } ; if unsafe { refcount_statics :: AHB2ENR_ADC345EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_adc345en (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_adc345rst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_adc345rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: AHB2ENR_ADC345EN -= 1 } ; if unsafe { refcount_statics :: AHB2ENR_ADC345EN } > 0 { return ; } crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_adc345en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: ADC3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: CORDIC { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_cordicen (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_cordicrst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_cordicrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_cordicen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: CORDIC { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: CRC { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_crcen (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_crcrst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_crcrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_crcen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: CRC { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: CRS { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_crsen (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_crsrst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_crsrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_crsen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: CRS { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DAC1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk2 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_dac1en (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_dac1rst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_dac1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_dac1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DAC1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DAC3 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk2 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_dac3en (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_dac3rst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_dac3rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_dac3en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DAC3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DMA1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma1en (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dma1rst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dma1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DMA1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DMA2 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma2en (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dma2rst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dma2rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma2en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DMA2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: DMAMUX1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dmamux1en (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dmamux1rst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_dmamux1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dmamux1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: DMAMUX1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: FDCAN1 { fn frequency () -> crate :: time :: Hertz { use crate :: pac :: rcc :: vals :: Fdcansel ; # [allow (unreachable_patterns)] match crate :: pac :: RCC . ccipr () . read () . fdcansel () { Fdcansel :: HSE => unsafe { crate :: rcc :: get_freqs () . hse . unwrap () } , Fdcansel :: PLL1_Q => unsafe { crate :: rcc :: get_freqs () . pll1_q . unwrap () } , Fdcansel :: PCLK1 => unsafe { crate :: rcc :: get_freqs () . pclk1 } , _ => unreachable ! () , } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_fdcanen (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_fdcanrst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_fdcanrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_fdcanen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: FDCAN1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: FDCAN2 { fn frequency () -> crate :: time :: Hertz { use crate :: pac :: rcc :: vals :: Fdcansel ; # [allow (unreachable_patterns)] match crate :: pac :: RCC . ccipr () . read () . fdcansel () { Fdcansel :: HSE => unsafe { crate :: rcc :: get_freqs () . hse . unwrap () } , Fdcansel :: PLL1_Q => unsafe { crate :: rcc :: get_freqs () . pll1_q . unwrap () } , Fdcansel :: PCLK1 => unsafe { crate :: rcc :: get_freqs () . pclk1 } , _ => unreachable ! () , } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_fdcanen (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_fdcanrst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_fdcanrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_fdcanen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: FDCAN2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: FLASH { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_flashen (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_flashrst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_flashrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_flashen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: FLASH { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: FMAC { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_fmacen (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_fmacrst (true)) ; crate :: pac :: RCC . ahb1rstr () . modify (| w | w . set_fmacrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_fmacen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: FMAC { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: I2C1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_i2c1en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_i2c1rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_i2c1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_i2c1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: I2C1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: I2C2 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_i2c2en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_i2c2rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_i2c2rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_i2c2en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: I2C2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: I2C3 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_i2c3en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_i2c3rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_i2c3rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_i2c3en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: I2C3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: LPUART1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR2_LPUART1EN += 1 } ; if unsafe { refcount_statics :: APB1ENR2_LPUART1EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP2 += 1 } ; crate :: pac :: RCC . apb1enr2 () . modify (| w | w . set_lpuart1en (true)) ; crate :: pac :: RCC . apb1rstr2 () . modify (| w | w . set_lpuart1rst (true)) ; crate :: pac :: RCC . apb1rstr2 () . modify (| w | w . set_lpuart1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR2_LPUART1EN -= 1 } ; if unsafe { refcount_statics :: APB1ENR2_LPUART1EN } > 0 { return ; } crate :: pac :: RCC . apb1enr2 () . modify (| w | w . set_lpuart1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP2 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: LPUART1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: PWR { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_pwren (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_pwrrst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_pwrrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_pwren (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: PWR { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: QUADSPI1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk3 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_quadspien (true)) ; crate :: pac :: RCC . ahb3rstr () . modify (| w | w . set_quadspirst (true)) ; crate :: pac :: RCC . ahb3rstr () . modify (| w | w . set_quadspirst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb3enr () . modify (| w | w . set_quadspien (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: QUADSPI1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: RNG { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . hclk2 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_rngen (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_rngrst (true)) ; crate :: pac :: RCC . ahb2rstr () . modify (| w | w . set_rngrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_rngen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: RNG { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: RTC { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_rtcapben (true)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_rtcapben (false)) ; } } impl crate :: rcc :: RccPeripheral for peripherals :: RTC { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SAI1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_sai1en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_sai1rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_sai1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_sai1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SAI1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_spi1en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_spi1rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_spi1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_spi1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI2 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_spi2en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_spi2rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_spi2rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_spi2en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SPI3 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_spi3en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_spi3rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_spi3rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_spi3en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SPI3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: SYSCFG { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_syscfgen (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_syscfgrst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_syscfgrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_syscfgen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: SYSCFG { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim1en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim1rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM15 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim15en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim15rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim15rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim15en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM15 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM16 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim16en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim16rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim16rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim16en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM16 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM17 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim17en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim17rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim17rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim17en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM17 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM2 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim2en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim2rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim2rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim2en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM20 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim20en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim20rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim20rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim20en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM20 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM3 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim3en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim3rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim3rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim3en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM4 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim4en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim4rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim4rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim4en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM4 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM6 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim6en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim6rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim6rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim6en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM6 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM7 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim7en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim7rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_tim7rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_tim7en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM7 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: TIM8 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2_tim } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim8en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim8rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_tim8rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb2enr () . modify (| w | w . set_tim8en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: TIM8 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: UART4 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR1_UART4EN += 1 } ; if unsafe { refcount_statics :: APB1ENR1_UART4EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_uart4en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_uart4rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_uart4rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR1_UART4EN -= 1 } ; if unsafe { refcount_statics :: APB1ENR1_UART4EN } > 0 { return ; } crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_uart4en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: UART4 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: UART5 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR1_UART5EN += 1 } ; if unsafe { refcount_statics :: APB1ENR1_UART5EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_uart5en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_uart5rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_uart5rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR1_UART5EN -= 1 } ; if unsafe { refcount_statics :: APB1ENR1_UART5EN } > 0 { return ; } crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_uart5en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: UART5 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: UCPD1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr2 () . modify (| w | w . set_ucpd1en (true)) ; crate :: pac :: RCC . apb1rstr2 () . modify (| w | w . set_ucpd1rst (true)) ; crate :: pac :: RCC . apb1rstr2 () . modify (| w | w . set_ucpd1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr2 () . modify (| w | w . set_ucpd1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: UCPD1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USART1 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk2 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB2ENR_USART1EN += 1 } ; if unsafe { refcount_statics :: APB2ENR_USART1EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb2enr () . modify (| w | w . set_usart1en (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_usart1rst (true)) ; crate :: pac :: RCC . apb2rstr () . modify (| w | w . set_usart1rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB2ENR_USART1EN -= 1 } ; if unsafe { refcount_statics :: APB2ENR_USART1EN } > 0 { return ; } crate :: pac :: RCC . apb2enr () . modify (| w | w . set_usart1en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USART1 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USART2 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR1_USART2EN += 1 } ; if unsafe { refcount_statics :: APB1ENR1_USART2EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_usart2en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_usart2rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_usart2rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR1_USART2EN -= 1 } ; if unsafe { refcount_statics :: APB1ENR1_USART2EN } > 0 { return ; } crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_usart2en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USART2 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USART3 { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR1_USART3EN += 1 } ; if unsafe { refcount_statics :: APB1ENR1_USART3EN } > 1 { return ; } # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_usart3en (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_usart3rst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_usart3rst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { unsafe { refcount_statics :: APB1ENR1_USART3EN -= 1 } ; if unsafe { refcount_statics :: APB1ENR1_USART3EN } > 0 { return ; } crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_usart3en (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USART3 { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: USB { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_usben (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_usbrst (true)) ; crate :: pac :: RCC . apb1rstr1 () . modify (| w | w . set_usbrst (false)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_usben (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: USB { } impl crate :: rcc :: sealed :: RccPeripheral for peripherals :: WWDG { fn frequency () -> crate :: time :: Hertz { unsafe { crate :: rcc :: get_freqs () . pclk1 } } fn enable_and_reset_with_cs (_cs : critical_section :: CriticalSection) { # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 += 1 } ; crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_wwdgen (true)) ; } fn disable_with_cs (_cs : critical_section :: CriticalSection) { crate :: pac :: RCC . apb1enr1 () . modify (| w | w . set_wwdgen (false)) ; # [cfg (feature = "low-power")] unsafe { crate :: rcc :: REFCOUNT_STOP1 -= 1 } ; } } impl crate :: rcc :: RccPeripheral for peripherals :: WWDG { } mod refcount_statics { pub (crate) static mut AHB2ENR_ADC12EN : u8 = 0 ; pub (crate) static mut AHB2ENR_ADC345EN : u8 = 0 ; pub (crate) static mut APB1ENR1_UART4EN : u8 = 0 ; pub (crate) static mut APB1ENR1_UART5EN : u8 = 0 ; pub (crate) static mut APB1ENR1_USART2EN : u8 = 0 ; pub (crate) static mut APB1ENR1_USART3EN : u8 = 0 ; pub (crate) static mut APB1ENR2_LPUART1EN : u8 = 0 ; pub (crate) static mut APB2ENR_USART1EN : u8 = 0 ; } pub unsafe fn init_dma () { } pub unsafe fn init_bdma () { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma1en (true)) ; crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dma2en (true)) ; } pub unsafe fn init_dmamux () { crate :: pac :: RCC . ahb1enr () . modify (| w | w . set_dmamux1en (true)) ; } pub unsafe fn init_gpdma () { } pub unsafe fn init_gpio () { crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_gpioaen (true)) ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_gpioben (true)) ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_gpiocen (true)) ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_gpioden (true)) ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_gpioeen (true)) ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_gpiofen (true)) ; crate :: pac :: RCC . ahb2enr () . modify (| w | w . set_gpiogen (true)) ; } impl_adc_pin ! (ADC1 , PA0 , 1u8) ; impl_adc_pin ! (ADC1 , PA1 , 2u8) ; impl_adc_pin ! (ADC1 , PA2 , 3u8) ; impl_adc_pin ! (ADC1 , PA3 , 4u8) ; impl_adc_pin ! (ADC1 , PB0 , 15u8) ; impl_adc_pin ! (ADC1 , PB1 , 12u8) ; impl_adc_pin ! (ADC1 , PB11 , 14u8) ; impl_adc_pin ! (ADC1 , PB12 , 11u8) ; impl_adc_pin ! (ADC1 , PB14 , 5u8) ; impl_adc_pin ! (ADC1 , PC0 , 6u8) ; impl_adc_pin ! (ADC1 , PC1 , 7u8) ; impl_adc_pin ! (ADC1 , PC2 , 8u8) ; impl_adc_pin ! (ADC1 , PC3 , 9u8) ; impl_adc_pin ! (ADC1 , PF0 , 10u8) ; impl_adc_pin ! (ADC2 , PA0 , 1u8) ; impl_adc_pin ! (ADC2 , PA1 , 2u8) ; impl_adc_pin ! (ADC2 , PA4 , 17u8) ; impl_adc_pin ! (ADC2 , PA5 , 13u8) ; impl_adc_pin ! (ADC2 , PA6 , 3u8) ; impl_adc_pin ! (ADC2 , PA7 , 4u8) ; impl_adc_pin ! (ADC2 , PB11 , 14u8) ; impl_adc_pin ! (ADC2 , PB15 , 15u8) ; impl_adc_pin ! (ADC2 , PB2 , 12u8) ; impl_adc_pin ! (ADC2 , PC0 , 6u8) ; impl_adc_pin ! (ADC2 , PC1 , 7u8) ; impl_adc_pin ! (ADC2 , PC2 , 8u8) ; impl_adc_pin ! (ADC2 , PC3 , 9u8) ; impl_adc_pin ! (ADC2 , PC4 , 5u8) ; impl_adc_pin ! (ADC2 , PC5 , 11u8) ; impl_adc_pin ! (ADC2 , PF1 , 10u8) ; impl_adc_pin ! (ADC3 , PB0 , 12u8) ; impl_adc_pin ! (ADC3 , PB1 , 1u8) ; impl_adc_pin ! (ADC3 , PB13 , 5u8) ; impl_dac_pin ! (DAC1 , PA4 , 1u8) ; impl_dac_pin ! (DAC1 , PA5 , 2u8) ; pin_trait_impl ! (crate :: can :: RxPin , FDCAN1 , PA11 , 9u8) ; pin_trait_impl ! (crate :: can :: TxPin , FDCAN1 , PA12 , 9u8) ; pin_trait_impl ! (crate :: can :: RxPin , FDCAN1 , PB8 , 9u8) ; pin_trait_impl ! (crate :: can :: TxPin , FDCAN1 , PB9 , 9u8) ; pin_trait_impl ! (crate :: can :: RxPin , FDCAN2 , PB12 , 9u8) ; pin_trait_impl ! (crate :: can :: TxPin , FDCAN2 , PB13 , 9u8) ; pin_trait_impl ! (crate :: can :: RxPin , FDCAN2 , PB5 , 9u8) ; pin_trait_impl ! (crate :: can :: TxPin , FDCAN2 , PB6 , 9u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C1 , PA13 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C1 , PA14 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C1 , PA15 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C1 , PB7 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C1 , PB8 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C1 , PB9 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C2 , PA8 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C2 , PA9 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C2 , PC4 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C2 , PF0 , 4u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C3 , PA8 , 2u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C3 , PB5 , 8u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C3 , PC11 , 8u8) ; pin_trait_impl ! (crate :: i2c :: SclPin , I2C3 , PC8 , 8u8) ; pin_trait_impl ! (crate :: i2c :: SdaPin , I2C3 , PC9 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , LPUART1 , PA2 , 12u8) ; pin_trait_impl ! (crate :: usart :: RxPin , LPUART1 , PA3 , 12u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , LPUART1 , PA6 , 12u8) ; pin_trait_impl ! (crate :: usart :: DePin , LPUART1 , PB1 , 12u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , LPUART1 , PB1 , 12u8) ; pin_trait_impl ! (crate :: usart :: RxPin , LPUART1 , PB10 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , LPUART1 , PB11 , 8u8) ; pin_trait_impl ! (crate :: usart :: DePin , LPUART1 , PB12 , 8u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , LPUART1 , PB12 , 8u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , LPUART1 , PB13 , 8u8) ; pin_trait_impl ! (crate :: usart :: RxPin , LPUART1 , PC0 , 8u8) ; pin_trait_impl ! (crate :: usart :: TxPin , LPUART1 , PC1 , 8u8) ; impl_opamp_vout_pin ! (OPAMP1 , PA2) ; impl_opamp_vp_pin ! (OPAMP1 , PA1 , 0u8) ; impl_opamp_vp_pin ! (OPAMP1 , PA3 , 1u8) ; impl_opamp_vp_pin ! (OPAMP1 , PA7 , 2u8) ; impl_opamp_vout_pin ! (OPAMP2 , PA6) ; impl_opamp_vp_pin ! (OPAMP2 , PA7 , 0u8) ; impl_opamp_vp_pin ! (OPAMP2 , PB14 , 1u8) ; impl_opamp_vp_pin ! (OPAMP2 , PB0 , 2u8) ; impl_opamp_vp_pin ! (OPAMP2 , PD14 , 3u8) ; impl_opamp_vout_pin ! (OPAMP3 , PB1) ; impl_opamp_vp_pin ! (OPAMP3 , PB0 , 0u8) ; impl_opamp_vp_pin ! (OPAMP3 , PB13 , 1u8) ; impl_opamp_vp_pin ! (OPAMP3 , PA1 , 2u8) ; impl_opamp_vout_pin ! (OPAMP6 , PB11) ; impl_opamp_vp_pin ! (OPAMP6 , PB12 , 0u8) ; impl_opamp_vp_pin ! (OPAMP6 , PD9 , 1u8) ; impl_opamp_vp_pin ! (OPAMP6 , PB13 , 2u8) ; pin_trait_impl ! (crate :: qspi :: BK1NSSPin , QUADSPI1 , PA2 , 10u8) ; pin_trait_impl ! (crate :: qspi :: SckPin , QUADSPI1 , PA3 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK1D3Pin , QUADSPI1 , PA6 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK1D2Pin , QUADSPI1 , PA7 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK1D1Pin , QUADSPI1 , PB0 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK1D0Pin , QUADSPI1 , PB1 , 10u8) ; pin_trait_impl ! (crate :: qspi :: SckPin , QUADSPI1 , PB10 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK1NSSPin , QUADSPI1 , PB11 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK2D1Pin , QUADSPI1 , PB2 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK2D0Pin , QUADSPI1 , PC1 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK2D1Pin , QUADSPI1 , PC2 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK2D2Pin , QUADSPI1 , PC3 , 10u8) ; pin_trait_impl ! (crate :: qspi :: BK2D3Pin , QUADSPI1 , PC4 , 10u8) ; pin_trait_impl ! (crate :: rcc :: McoPin , MCO , PA8 , 0u8) ; pin_trait_impl ! (crate :: rcc :: McoPin , MCO , PG10 , 0u8) ; pin_trait_impl ! (crate :: sai :: SdPin < A > , SAI1 , PA10 , 14u8) ; pin_trait_impl ! (crate :: sai :: SdPin < B > , SAI1 , PA13 , 13u8) ; pin_trait_impl ! (crate :: sai :: FsPin < B > , SAI1 , PA14 , 13u8) ; pin_trait_impl ! (crate :: sai :: MclkPin < A > , SAI1 , PA3 , 13u8) ; pin_trait_impl ! (crate :: sai :: FsPin < B > , SAI1 , PA4 , 13u8) ; pin_trait_impl ! (crate :: sai :: SckPin < A > , SAI1 , PA8 , 14u8) ; pin_trait_impl ! (crate :: sai :: FsPin < A > , SAI1 , PA9 , 14u8) ; pin_trait_impl ! (crate :: sai :: SckPin < A > , SAI1 , PB10 , 14u8) ; pin_trait_impl ! (crate :: sai :: SckPin < B > , SAI1 , PB3 , 14u8) ; pin_trait_impl ! (crate :: sai :: MclkPin < B > , SAI1 , PB4 , 14u8) ; pin_trait_impl ! (crate :: sai :: SdPin < B > , SAI1 , PB5 , 12u8) ; pin_trait_impl ! (crate :: sai :: FsPin < B > , SAI1 , PB6 , 14u8) ; pin_trait_impl ! (crate :: sai :: MclkPin < A > , SAI1 , PB8 , 14u8) ; pin_trait_impl ! (crate :: sai :: FsPin < A > , SAI1 , PB9 , 14u8) ; pin_trait_impl ! (crate :: sai :: SdPin < A > , SAI1 , PC1 , 13u8) ; pin_trait_impl ! (crate :: sai :: SdPin < A > , SAI1 , PC3 , 13u8) ; pin_trait_impl ! (crate :: spi :: CsPin , SPI1 , PA15 , 5u8) ; pin_trait_impl ! (crate :: spi :: CsPin , SPI1 , PA4 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI1 , PA5 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI1 , PA6 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI1 , PA7 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI1 , PB3 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI1 , PB4 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI1 , PB5 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI2 , PA10 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI2 , PA11 , 5u8) ; pin_trait_impl ! (crate :: spi :: MckPin , SPI2 , PA8 , 5u8) ; pin_trait_impl ! (crate :: spi :: WsPin , SPI2 , PB12 , 5u8) ; pin_trait_impl ! (crate :: spi :: CsPin , SPI2 , PB12 , 5u8) ; pin_trait_impl ! (crate :: spi :: CkPin , SPI2 , PB13 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI2 , PB13 , 5u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI2 , PB14 , 5u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI2 , PB15 , 5u8) ; pin_trait_impl ! (crate :: spi :: MckPin , SPI2 , PC6 , 6u8) ; pin_trait_impl ! (crate :: spi :: WsPin , SPI2 , PF0 , 5u8) ; pin_trait_impl ! (crate :: spi :: CsPin , SPI2 , PF0 , 5u8) ; pin_trait_impl ! (crate :: spi :: CkPin , SPI2 , PF1 , 5u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI2 , PF1 , 5u8) ; pin_trait_impl ! (crate :: spi :: WsPin , SPI3 , PA15 , 6u8) ; pin_trait_impl ! (crate :: spi :: CsPin , SPI3 , PA15 , 6u8) ; pin_trait_impl ! (crate :: spi :: WsPin , SPI3 , PA4 , 6u8) ; pin_trait_impl ! (crate :: spi :: CsPin , SPI3 , PA4 , 6u8) ; pin_trait_impl ! (crate :: spi :: MckPin , SPI3 , PA9 , 5u8) ; pin_trait_impl ! (crate :: spi :: CkPin , SPI3 , PB3 , 6u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI3 , PB3 , 6u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI3 , PB4 , 6u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI3 , PB5 , 6u8) ; pin_trait_impl ! (crate :: spi :: CkPin , SPI3 , PC10 , 6u8) ; pin_trait_impl ! (crate :: spi :: SckPin , SPI3 , PC10 , 6u8) ; pin_trait_impl ! (crate :: spi :: MisoPin , SPI3 , PC11 , 6u8) ; pin_trait_impl ! (crate :: spi :: MosiPin , SPI3 , PC12 , 6u8) ; pin_trait_impl ! (crate :: spi :: MckPin , SPI3 , PC7 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM1 , PA10 , 6u8) ; pin_trait_impl ! (crate :: timer :: BreakInput2Pin , TIM1 , PA11 , 12u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM1 , PA11 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM1 , PA11 , 11u8) ; pin_trait_impl ! (crate :: timer :: Channel2ComplementaryPin , TIM1 , PA12 , 6u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM1 , PA12 , 11u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM1 , PA14 , 6u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM1 , PA15 , 9u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM1 , PA6 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM1 , PA7 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM1 , PA8 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM1 , PA9 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel2ComplementaryPin , TIM1 , PB0 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel3ComplementaryPin , TIM1 , PB1 , 6u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM1 , PB10 , 12u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM1 , PB12 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM1 , PB13 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel2ComplementaryPin , TIM1 , PB14 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel3ComplementaryPin , TIM1 , PB15 , 4u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM1 , PB8 , 12u8) ; pin_trait_impl ! (crate :: timer :: Channel3ComplementaryPin , TIM1 , PB9 , 12u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM1 , PC0 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM1 , PC1 , 2u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM1 , PC13 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM1 , PC13 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM1 , PC2 , 2u8) ; pin_trait_impl ! (crate :: timer :: BreakInput2Pin , TIM1 , PC3 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM1 , PC3 , 2u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM1 , PC4 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel4ComplementaryPin , TIM1 , PC5 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel3ComplementaryPin , TIM1 , PF0 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM15 , PA1 , 9u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM15 , PA2 , 9u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM15 , PA3 , 9u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM15 , PA9 , 9u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM15 , PB14 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM15 , PB15 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM15 , PB15 , 1u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM15 , PC5 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM16 , PA12 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM16 , PA13 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM16 , PA6 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM16 , PB4 , 1u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM16 , PB5 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM16 , PB6 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM16 , PB8 , 1u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM17 , PA10 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM17 , PA7 , 1u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM17 , PB4 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM17 , PB5 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM17 , PB7 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM17 , PB9 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM2 , PA0 , 1u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM2 , PA0 , 14u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM2 , PA1 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM2 , PA10 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM2 , PA15 , 1u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM2 , PA15 , 14u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM2 , PA2 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM2 , PA3 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM2 , PA5 , 1u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM2 , PA5 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM2 , PA9 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM2 , PB10 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM2 , PB11 , 1u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM2 , PB3 , 1u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM20 , PA15 , 3u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM20 , PB2 , 3u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM20 , PC2 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM20 , PC8 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM3 , PA4 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM3 , PA6 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM3 , PA7 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM3 , PB0 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM3 , PB1 , 2u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM3 , PB3 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM3 , PB4 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM3 , PB5 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM3 , PB7 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM3 , PC6 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM3 , PC7 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM3 , PC8 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM3 , PC9 , 2u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM3 , PD2 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM4 , PA11 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM4 , PA12 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM4 , PA13 , 10u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM4 , PA8 , 10u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM4 , PB3 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM4 , PB6 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM4 , PB7 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM4 , PB8 , 2u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM4 , PB9 , 2u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM8 , PA0 , 9u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM8 , PA0 , 10u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM8 , PA10 , 11u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM8 , PA14 , 5u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM8 , PA15 , 2u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM8 , PA6 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM8 , PA7 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel2ComplementaryPin , TIM8 , PB0 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel3ComplementaryPin , TIM8 , PB1 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM8 , PB3 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel2ComplementaryPin , TIM8 , PB4 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel3ComplementaryPin , TIM8 , PB5 , 3u8) ; pin_trait_impl ! (crate :: timer :: BreakInput2Pin , TIM8 , PB6 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM8 , PB6 , 5u8) ; pin_trait_impl ! (crate :: timer :: ExternalTriggerPin , TIM8 , PB6 , 6u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM8 , PB7 , 5u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM8 , PB8 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM8 , PB9 , 10u8) ; pin_trait_impl ! (crate :: timer :: Channel1ComplementaryPin , TIM8 , PC10 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel2ComplementaryPin , TIM8 , PC11 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel3ComplementaryPin , TIM8 , PC12 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel4ComplementaryPin , TIM8 , PC13 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel1Pin , TIM8 , PC6 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel2Pin , TIM8 , PC7 , 4u8) ; pin_trait_impl ! (crate :: timer :: Channel3Pin , TIM8 , PC8 , 4u8) ; pin_trait_impl ! (crate :: timer :: BreakInput2Pin , TIM8 , PC9 , 6u8) ; pin_trait_impl ! (crate :: timer :: Channel4Pin , TIM8 , PC9 , 4u8) ; pin_trait_impl ! (crate :: timer :: BreakInputPin , TIM8 , PD2 , 4u8) ; pin_trait_impl ! (crate :: usart :: DePin , UART4 , PA15 , 8u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , UART4 , PA15 , 8u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , UART4 , PB7 , 14u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART4 , PC10 , 5u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART4 , PC11 , 5u8) ; pin_trait_impl ! (crate :: usart :: DePin , UART5 , PB4 , 8u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , UART5 , PB4 , 8u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , UART5 , PB5 , 14u8) ; pin_trait_impl ! (crate :: usart :: TxPin , UART5 , PC12 , 5u8) ; pin_trait_impl ! (crate :: usart :: RxPin , UART5 , PD2 , 5u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART1 , PA10 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART1 , PA11 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART1 , PA12 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART1 , PA12 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART1 , PA8 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART1 , PA9 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART1 , PB6 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART1 , PB7 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART1 , PC4 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART1 , PC5 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART2 , PA0 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART2 , PA1 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART2 , PA1 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART2 , PA14 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART2 , PA15 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART2 , PA2 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART2 , PA3 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART2 , PA4 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART2 , PB3 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART2 , PB4 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART2 , PB5 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART3 , PA13 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART3 , PB10 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART3 , PB11 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART3 , PB12 , 7u8) ; pin_trait_impl ! (crate :: usart :: CtsPin , USART3 , PB13 , 7u8) ; pin_trait_impl ! (crate :: usart :: DePin , USART3 , PB14 , 7u8) ; pin_trait_impl ! (crate :: usart :: RtsPin , USART3 , PB14 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART3 , PB8 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART3 , PB9 , 7u8) ; pin_trait_impl ! (crate :: usart :: TxPin , USART3 , PC10 , 7u8) ; pin_trait_impl ! (crate :: usart :: RxPin , USART3 , PC11 , 7u8) ; pin_trait_impl ! (crate :: usart :: CkPin , USART3 , PC12 , 7u8) ; pin_trait_impl ! (crate :: usb :: DmPin , USB , PA11 , 0u8) ; pin_trait_impl ! (crate :: usb :: DpPin , USB , PA12 , 0u8) ; dma_trait_impl ! (crate :: dac :: DacDma1 , DAC1 , { dmamux : DMAMUX1 } , 6u8) ; dma_trait_impl ! (crate :: dac :: DacDma2 , DAC1 , { dmamux : DMAMUX1 } , 7u8) ; dma_trait_impl ! (crate :: dac :: DacDma1 , DAC3 , { dmamux : DMAMUX1 } , 102u8) ; dma_trait_impl ! (crate :: dac :: DacDma2 , DAC3 , { dmamux : DMAMUX1 } , 103u8) ; dma_trait_impl ! (crate :: i2c :: RxDma , I2C1 , { dmamux : DMAMUX1 } , 16u8) ; dma_trait_impl ! (crate :: i2c :: TxDma , I2C1 , { dmamux : DMAMUX1 } , 17u8) ; dma_trait_impl ! (crate :: i2c :: RxDma , I2C2 , { dmamux : DMAMUX1 } , 18u8) ; dma_trait_impl ! (crate :: i2c :: TxDma , I2C2 , { dmamux : DMAMUX1 } , 19u8) ; dma_trait_impl ! (crate :: i2c :: RxDma , I2C3 , { dmamux : DMAMUX1 } , 20u8) ; dma_trait_impl ! (crate :: i2c :: TxDma , I2C3 , { dmamux : DMAMUX1 } , 21u8) ; dma_trait_impl ! (crate :: usart :: RxDma , LPUART1 , { dmamux : DMAMUX1 } , 34u8) ; dma_trait_impl ! (crate :: usart :: TxDma , LPUART1 , { dmamux : DMAMUX1 } , 35u8) ; dma_trait_impl ! (crate :: sai :: Dma < A > , SAI1 , { dmamux : DMAMUX1 } , 108u8) ; dma_trait_impl ! (crate :: sai :: Dma < B > , SAI1 , { dmamux : DMAMUX1 } , 109u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI1 , { dmamux : DMAMUX1 } , 10u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI1 , { dmamux : DMAMUX1 } , 11u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI2 , { dmamux : DMAMUX1 } , 12u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI2 , { dmamux : DMAMUX1 } , 13u8) ; dma_trait_impl ! (crate :: spi :: RxDma , SPI3 , { dmamux : DMAMUX1 } , 14u8) ; dma_trait_impl ! (crate :: spi :: TxDma , SPI3 , { dmamux : DMAMUX1 } , 15u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM1 , { dmamux : DMAMUX1 } , 46u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM15 , { dmamux : DMAMUX1 } , 79u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM16 , { dmamux : DMAMUX1 } , 83u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM17 , { dmamux : DMAMUX1 } , 85u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM2 , { dmamux : DMAMUX1 } , 60u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM20 , { dmamux : DMAMUX1 } , 90u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM3 , { dmamux : DMAMUX1 } , 65u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM4 , { dmamux : DMAMUX1 } , 71u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM6 , { dmamux : DMAMUX1 } , 8u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM7 , { dmamux : DMAMUX1 } , 9u8) ; dma_trait_impl ! (crate :: timer :: UpDma , TIM8 , { dmamux : DMAMUX1 } , 53u8) ; dma_trait_impl ! (crate :: usart :: RxDma , UART4 , { dmamux : DMAMUX1 } , 30u8) ; dma_trait_impl ! (crate :: usart :: TxDma , UART4 , { dmamux : DMAMUX1 } , 31u8) ; dma_trait_impl ! (crate :: usart :: RxDma , UART5 , { dmamux : DMAMUX1 } , 32u8) ; dma_trait_impl ! (crate :: usart :: TxDma , UART5 , { dmamux : DMAMUX1 } , 33u8) ; dma_trait_impl ! (crate :: usart :: RxDma , USART1 , { dmamux : DMAMUX1 } , 24u8) ; dma_trait_impl ! (crate :: usart :: TxDma , USART1 , { dmamux : DMAMUX1 } , 25u8) ; dma_trait_impl ! (crate :: usart :: RxDma , USART2 , { dmamux : DMAMUX1 } , 26u8) ; dma_trait_impl ! (crate :: usart :: TxDma , USART2 , { dmamux : DMAMUX1 } , 27u8) ; dma_trait_impl ! (crate :: usart :: RxDma , USART3 , { dmamux : DMAMUX1 } , 28u8) ; dma_trait_impl ! (crate :: usart :: TxDma , USART3 , { dmamux : DMAMUX1 } , 29u8) ; impl core :: ops :: Div < crate :: pac :: rcc :: vals :: Hpre > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn div (self , rhs : crate :: pac :: rcc :: vals :: Hpre) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Hpre :: DIV1 => self * 1u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV2 => self * 1u32 / 2u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV4 => self * 1u32 / 4u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV8 => self * 1u32 / 8u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV16 => self * 1u32 / 16u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV64 => self * 1u32 / 64u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV128 => self * 1u32 / 128u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV256 => self * 1u32 / 256u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV512 => self * 1u32 / 512u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Mul < crate :: pac :: rcc :: vals :: Hpre > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn mul (self , rhs : crate :: pac :: rcc :: vals :: Hpre) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Hpre :: DIV1 => self * 1u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV2 => self * 2u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV4 => self * 4u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV8 => self * 8u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV16 => self * 16u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV64 => self * 64u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV128 => self * 128u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV256 => self * 256u32 / 1u32 , crate :: pac :: rcc :: vals :: Hpre :: DIV512 => self * 512u32 / 1u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Div < crate :: pac :: rcc :: vals :: Mcopre > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn div (self , rhs : crate :: pac :: rcc :: vals :: Mcopre) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Mcopre :: DIV1 => self * 1u32 / 1u32 , crate :: pac :: rcc :: vals :: Mcopre :: DIV2 => self * 1u32 / 2u32 , crate :: pac :: rcc :: vals :: Mcopre :: DIV4 => self * 1u32 / 4u32 , crate :: pac :: rcc :: vals :: Mcopre :: DIV8 => self * 1u32 / 8u32 , crate :: pac :: rcc :: vals :: Mcopre :: DIV16 => self * 1u32 / 16u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Mul < crate :: pac :: rcc :: vals :: Mcopre > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn mul (self , rhs : crate :: pac :: rcc :: vals :: Mcopre) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Mcopre :: DIV1 => self * 1u32 / 1u32 , crate :: pac :: rcc :: vals :: Mcopre :: DIV2 => self * 2u32 / 1u32 , crate :: pac :: rcc :: vals :: Mcopre :: DIV4 => self * 4u32 / 1u32 , crate :: pac :: rcc :: vals :: Mcopre :: DIV8 => self * 8u32 / 1u32 , crate :: pac :: rcc :: vals :: Mcopre :: DIV16 => self * 16u32 / 1u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Div < crate :: pac :: rcc :: vals :: Pllm > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn div (self , rhs : crate :: pac :: rcc :: vals :: Pllm) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Pllm :: DIV1 => self * 1u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV2 => self * 1u32 / 2u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV3 => self * 1u32 / 3u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV4 => self * 1u32 / 4u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV5 => self * 1u32 / 5u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV6 => self * 1u32 / 6u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV7 => self * 1u32 / 7u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV8 => self * 1u32 / 8u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV9 => self * 1u32 / 9u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV10 => self * 1u32 / 10u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV11 => self * 1u32 / 11u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV12 => self * 1u32 / 12u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV13 => self * 1u32 / 13u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV14 => self * 1u32 / 14u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV15 => self * 1u32 / 15u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV16 => self * 1u32 / 16u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Mul < crate :: pac :: rcc :: vals :: Pllm > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn mul (self , rhs : crate :: pac :: rcc :: vals :: Pllm) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Pllm :: DIV1 => self * 1u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV2 => self * 2u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV3 => self * 3u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV4 => self * 4u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV5 => self * 5u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV6 => self * 6u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV7 => self * 7u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV8 => self * 8u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV9 => self * 9u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV10 => self * 10u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV11 => self * 11u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV12 => self * 12u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV13 => self * 13u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV14 => self * 14u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV15 => self * 15u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllm :: DIV16 => self * 16u32 / 1u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Div < crate :: pac :: rcc :: vals :: Plln > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn div (self , rhs : crate :: pac :: rcc :: vals :: Plln) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Plln :: MUL8 => self * 1u32 / 8u32 , crate :: pac :: rcc :: vals :: Plln :: MUL9 => self * 1u32 / 9u32 , crate :: pac :: rcc :: vals :: Plln :: MUL10 => self * 1u32 / 10u32 , crate :: pac :: rcc :: vals :: Plln :: MUL11 => self * 1u32 / 11u32 , crate :: pac :: rcc :: vals :: Plln :: MUL12 => self * 1u32 / 12u32 , crate :: pac :: rcc :: vals :: Plln :: MUL13 => self * 1u32 / 13u32 , crate :: pac :: rcc :: vals :: Plln :: MUL14 => self * 1u32 / 14u32 , crate :: pac :: rcc :: vals :: Plln :: MUL15 => self * 1u32 / 15u32 , crate :: pac :: rcc :: vals :: Plln :: MUL16 => self * 1u32 / 16u32 , crate :: pac :: rcc :: vals :: Plln :: MUL17 => self * 1u32 / 17u32 , crate :: pac :: rcc :: vals :: Plln :: MUL18 => self * 1u32 / 18u32 , crate :: pac :: rcc :: vals :: Plln :: MUL19 => self * 1u32 / 19u32 , crate :: pac :: rcc :: vals :: Plln :: MUL20 => self * 1u32 / 20u32 , crate :: pac :: rcc :: vals :: Plln :: MUL21 => self * 1u32 / 21u32 , crate :: pac :: rcc :: vals :: Plln :: MUL22 => self * 1u32 / 22u32 , crate :: pac :: rcc :: vals :: Plln :: MUL23 => self * 1u32 / 23u32 , crate :: pac :: rcc :: vals :: Plln :: MUL24 => self * 1u32 / 24u32 , crate :: pac :: rcc :: vals :: Plln :: MUL25 => self * 1u32 / 25u32 , crate :: pac :: rcc :: vals :: Plln :: MUL26 => self * 1u32 / 26u32 , crate :: pac :: rcc :: vals :: Plln :: MUL27 => self * 1u32 / 27u32 , crate :: pac :: rcc :: vals :: Plln :: MUL28 => self * 1u32 / 28u32 , crate :: pac :: rcc :: vals :: Plln :: MUL29 => self * 1u32 / 29u32 , crate :: pac :: rcc :: vals :: Plln :: MUL30 => self * 1u32 / 30u32 , crate :: pac :: rcc :: vals :: Plln :: MUL31 => self * 1u32 / 31u32 , crate :: pac :: rcc :: vals :: Plln :: MUL32 => self * 1u32 / 32u32 , crate :: pac :: rcc :: vals :: Plln :: MUL33 => self * 1u32 / 33u32 , crate :: pac :: rcc :: vals :: Plln :: MUL34 => self * 1u32 / 34u32 , crate :: pac :: rcc :: vals :: Plln :: MUL35 => self * 1u32 / 35u32 , crate :: pac :: rcc :: vals :: Plln :: MUL36 => self * 1u32 / 36u32 , crate :: pac :: rcc :: vals :: Plln :: MUL37 => self * 1u32 / 37u32 , crate :: pac :: rcc :: vals :: Plln :: MUL38 => self * 1u32 / 38u32 , crate :: pac :: rcc :: vals :: Plln :: MUL39 => self * 1u32 / 39u32 , crate :: pac :: rcc :: vals :: Plln :: MUL40 => self * 1u32 / 40u32 , crate :: pac :: rcc :: vals :: Plln :: MUL41 => self * 1u32 / 41u32 , crate :: pac :: rcc :: vals :: Plln :: MUL42 => self * 1u32 / 42u32 , crate :: pac :: rcc :: vals :: Plln :: MUL43 => self * 1u32 / 43u32 , crate :: pac :: rcc :: vals :: Plln :: MUL44 => self * 1u32 / 44u32 , crate :: pac :: rcc :: vals :: Plln :: MUL45 => self * 1u32 / 45u32 , crate :: pac :: rcc :: vals :: Plln :: MUL46 => self * 1u32 / 46u32 , crate :: pac :: rcc :: vals :: Plln :: MUL47 => self * 1u32 / 47u32 , crate :: pac :: rcc :: vals :: Plln :: MUL48 => self * 1u32 / 48u32 , crate :: pac :: rcc :: vals :: Plln :: MUL49 => self * 1u32 / 49u32 , crate :: pac :: rcc :: vals :: Plln :: MUL50 => self * 1u32 / 50u32 , crate :: pac :: rcc :: vals :: Plln :: MUL51 => self * 1u32 / 51u32 , crate :: pac :: rcc :: vals :: Plln :: MUL52 => self * 1u32 / 52u32 , crate :: pac :: rcc :: vals :: Plln :: MUL53 => self * 1u32 / 53u32 , crate :: pac :: rcc :: vals :: Plln :: MUL54 => self * 1u32 / 54u32 , crate :: pac :: rcc :: vals :: Plln :: MUL55 => self * 1u32 / 55u32 , crate :: pac :: rcc :: vals :: Plln :: MUL56 => self * 1u32 / 56u32 , crate :: pac :: rcc :: vals :: Plln :: MUL57 => self * 1u32 / 57u32 , crate :: pac :: rcc :: vals :: Plln :: MUL58 => self * 1u32 / 58u32 , crate :: pac :: rcc :: vals :: Plln :: MUL59 => self * 1u32 / 59u32 , crate :: pac :: rcc :: vals :: Plln :: MUL60 => self * 1u32 / 60u32 , crate :: pac :: rcc :: vals :: Plln :: MUL61 => self * 1u32 / 61u32 , crate :: pac :: rcc :: vals :: Plln :: MUL62 => self * 1u32 / 62u32 , crate :: pac :: rcc :: vals :: Plln :: MUL63 => self * 1u32 / 63u32 , crate :: pac :: rcc :: vals :: Plln :: MUL64 => self * 1u32 / 64u32 , crate :: pac :: rcc :: vals :: Plln :: MUL65 => self * 1u32 / 65u32 , crate :: pac :: rcc :: vals :: Plln :: MUL66 => self * 1u32 / 66u32 , crate :: pac :: rcc :: vals :: Plln :: MUL67 => self * 1u32 / 67u32 , crate :: pac :: rcc :: vals :: Plln :: MUL68 => self * 1u32 / 68u32 , crate :: pac :: rcc :: vals :: Plln :: MUL69 => self * 1u32 / 69u32 , crate :: pac :: rcc :: vals :: Plln :: MUL70 => self * 1u32 / 70u32 , crate :: pac :: rcc :: vals :: Plln :: MUL71 => self * 1u32 / 71u32 , crate :: pac :: rcc :: vals :: Plln :: MUL72 => self * 1u32 / 72u32 , crate :: pac :: rcc :: vals :: Plln :: MUL73 => self * 1u32 / 73u32 , crate :: pac :: rcc :: vals :: Plln :: MUL74 => self * 1u32 / 74u32 , crate :: pac :: rcc :: vals :: Plln :: MUL75 => self * 1u32 / 75u32 , crate :: pac :: rcc :: vals :: Plln :: MUL76 => self * 1u32 / 76u32 , crate :: pac :: rcc :: vals :: Plln :: MUL77 => self * 1u32 / 77u32 , crate :: pac :: rcc :: vals :: Plln :: MUL78 => self * 1u32 / 78u32 , crate :: pac :: rcc :: vals :: Plln :: MUL79 => self * 1u32 / 79u32 , crate :: pac :: rcc :: vals :: Plln :: MUL80 => self * 1u32 / 80u32 , crate :: pac :: rcc :: vals :: Plln :: MUL81 => self * 1u32 / 81u32 , crate :: pac :: rcc :: vals :: Plln :: MUL82 => self * 1u32 / 82u32 , crate :: pac :: rcc :: vals :: Plln :: MUL83 => self * 1u32 / 83u32 , crate :: pac :: rcc :: vals :: Plln :: MUL84 => self * 1u32 / 84u32 , crate :: pac :: rcc :: vals :: Plln :: MUL85 => self * 1u32 / 85u32 , crate :: pac :: rcc :: vals :: Plln :: MUL86 => self * 1u32 / 86u32 , crate :: pac :: rcc :: vals :: Plln :: MUL87 => self * 1u32 / 87u32 , crate :: pac :: rcc :: vals :: Plln :: MUL88 => self * 1u32 / 88u32 , crate :: pac :: rcc :: vals :: Plln :: MUL89 => self * 1u32 / 89u32 , crate :: pac :: rcc :: vals :: Plln :: MUL90 => self * 1u32 / 90u32 , crate :: pac :: rcc :: vals :: Plln :: MUL91 => self * 1u32 / 91u32 , crate :: pac :: rcc :: vals :: Plln :: MUL92 => self * 1u32 / 92u32 , crate :: pac :: rcc :: vals :: Plln :: MUL93 => self * 1u32 / 93u32 , crate :: pac :: rcc :: vals :: Plln :: MUL94 => self * 1u32 / 94u32 , crate :: pac :: rcc :: vals :: Plln :: MUL95 => self * 1u32 / 95u32 , crate :: pac :: rcc :: vals :: Plln :: MUL96 => self * 1u32 / 96u32 , crate :: pac :: rcc :: vals :: Plln :: MUL97 => self * 1u32 / 97u32 , crate :: pac :: rcc :: vals :: Plln :: MUL98 => self * 1u32 / 98u32 , crate :: pac :: rcc :: vals :: Plln :: MUL99 => self * 1u32 / 99u32 , crate :: pac :: rcc :: vals :: Plln :: MUL100 => self * 1u32 / 100u32 , crate :: pac :: rcc :: vals :: Plln :: MUL101 => self * 1u32 / 101u32 , crate :: pac :: rcc :: vals :: Plln :: MUL102 => self * 1u32 / 102u32 , crate :: pac :: rcc :: vals :: Plln :: MUL103 => self * 1u32 / 103u32 , crate :: pac :: rcc :: vals :: Plln :: MUL104 => self * 1u32 / 104u32 , crate :: pac :: rcc :: vals :: Plln :: MUL105 => self * 1u32 / 105u32 , crate :: pac :: rcc :: vals :: Plln :: MUL106 => self * 1u32 / 106u32 , crate :: pac :: rcc :: vals :: Plln :: MUL107 => self * 1u32 / 107u32 , crate :: pac :: rcc :: vals :: Plln :: MUL108 => self * 1u32 / 108u32 , crate :: pac :: rcc :: vals :: Plln :: MUL109 => self * 1u32 / 109u32 , crate :: pac :: rcc :: vals :: Plln :: MUL110 => self * 1u32 / 110u32 , crate :: pac :: rcc :: vals :: Plln :: MUL111 => self * 1u32 / 111u32 , crate :: pac :: rcc :: vals :: Plln :: MUL112 => self * 1u32 / 112u32 , crate :: pac :: rcc :: vals :: Plln :: MUL113 => self * 1u32 / 113u32 , crate :: pac :: rcc :: vals :: Plln :: MUL114 => self * 1u32 / 114u32 , crate :: pac :: rcc :: vals :: Plln :: MUL115 => self * 1u32 / 115u32 , crate :: pac :: rcc :: vals :: Plln :: MUL116 => self * 1u32 / 116u32 , crate :: pac :: rcc :: vals :: Plln :: MUL117 => self * 1u32 / 117u32 , crate :: pac :: rcc :: vals :: Plln :: MUL118 => self * 1u32 / 118u32 , crate :: pac :: rcc :: vals :: Plln :: MUL119 => self * 1u32 / 119u32 , crate :: pac :: rcc :: vals :: Plln :: MUL120 => self * 1u32 / 120u32 , crate :: pac :: rcc :: vals :: Plln :: MUL121 => self * 1u32 / 121u32 , crate :: pac :: rcc :: vals :: Plln :: MUL122 => self * 1u32 / 122u32 , crate :: pac :: rcc :: vals :: Plln :: MUL123 => self * 1u32 / 123u32 , crate :: pac :: rcc :: vals :: Plln :: MUL124 => self * 1u32 / 124u32 , crate :: pac :: rcc :: vals :: Plln :: MUL125 => self * 1u32 / 125u32 , crate :: pac :: rcc :: vals :: Plln :: MUL126 => self * 1u32 / 126u32 , crate :: pac :: rcc :: vals :: Plln :: MUL127 => self * 1u32 / 127u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Mul < crate :: pac :: rcc :: vals :: Plln > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn mul (self , rhs : crate :: pac :: rcc :: vals :: Plln) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Plln :: MUL8 => self * 8u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL9 => self * 9u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL10 => self * 10u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL11 => self * 11u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL12 => self * 12u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL13 => self * 13u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL14 => self * 14u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL15 => self * 15u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL16 => self * 16u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL17 => self * 17u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL18 => self * 18u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL19 => self * 19u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL20 => self * 20u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL21 => self * 21u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL22 => self * 22u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL23 => self * 23u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL24 => self * 24u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL25 => self * 25u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL26 => self * 26u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL27 => self * 27u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL28 => self * 28u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL29 => self * 29u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL30 => self * 30u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL31 => self * 31u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL32 => self * 32u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL33 => self * 33u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL34 => self * 34u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL35 => self * 35u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL36 => self * 36u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL37 => self * 37u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL38 => self * 38u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL39 => self * 39u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL40 => self * 40u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL41 => self * 41u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL42 => self * 42u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL43 => self * 43u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL44 => self * 44u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL45 => self * 45u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL46 => self * 46u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL47 => self * 47u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL48 => self * 48u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL49 => self * 49u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL50 => self * 50u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL51 => self * 51u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL52 => self * 52u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL53 => self * 53u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL54 => self * 54u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL55 => self * 55u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL56 => self * 56u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL57 => self * 57u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL58 => self * 58u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL59 => self * 59u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL60 => self * 60u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL61 => self * 61u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL62 => self * 62u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL63 => self * 63u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL64 => self * 64u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL65 => self * 65u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL66 => self * 66u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL67 => self * 67u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL68 => self * 68u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL69 => self * 69u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL70 => self * 70u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL71 => self * 71u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL72 => self * 72u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL73 => self * 73u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL74 => self * 74u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL75 => self * 75u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL76 => self * 76u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL77 => self * 77u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL78 => self * 78u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL79 => self * 79u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL80 => self * 80u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL81 => self * 81u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL82 => self * 82u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL83 => self * 83u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL84 => self * 84u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL85 => self * 85u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL86 => self * 86u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL87 => self * 87u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL88 => self * 88u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL89 => self * 89u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL90 => self * 90u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL91 => self * 91u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL92 => self * 92u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL93 => self * 93u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL94 => self * 94u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL95 => self * 95u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL96 => self * 96u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL97 => self * 97u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL98 => self * 98u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL99 => self * 99u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL100 => self * 100u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL101 => self * 101u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL102 => self * 102u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL103 => self * 103u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL104 => self * 104u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL105 => self * 105u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL106 => self * 106u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL107 => self * 107u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL108 => self * 108u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL109 => self * 109u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL110 => self * 110u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL111 => self * 111u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL112 => self * 112u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL113 => self * 113u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL114 => self * 114u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL115 => self * 115u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL116 => self * 116u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL117 => self * 117u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL118 => self * 118u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL119 => self * 119u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL120 => self * 120u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL121 => self * 121u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL122 => self * 122u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL123 => self * 123u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL124 => self * 124u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL125 => self * 125u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL126 => self * 126u32 / 1u32 , crate :: pac :: rcc :: vals :: Plln :: MUL127 => self * 127u32 / 1u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Div < crate :: pac :: rcc :: vals :: Pllp > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn div (self , rhs : crate :: pac :: rcc :: vals :: Pllp) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Pllp :: DIV2 => self * 1u32 / 2u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV3 => self * 1u32 / 3u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV4 => self * 1u32 / 4u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV5 => self * 1u32 / 5u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV6 => self * 1u32 / 6u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV7 => self * 1u32 / 7u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV8 => self * 1u32 / 8u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV9 => self * 1u32 / 9u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV10 => self * 1u32 / 10u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV11 => self * 1u32 / 11u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV12 => self * 1u32 / 12u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV13 => self * 1u32 / 13u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV14 => self * 1u32 / 14u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV15 => self * 1u32 / 15u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV16 => self * 1u32 / 16u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV17 => self * 1u32 / 17u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV18 => self * 1u32 / 18u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV19 => self * 1u32 / 19u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV20 => self * 1u32 / 20u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV21 => self * 1u32 / 21u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV22 => self * 1u32 / 22u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV23 => self * 1u32 / 23u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV24 => self * 1u32 / 24u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV25 => self * 1u32 / 25u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV26 => self * 1u32 / 26u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV27 => self * 1u32 / 27u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV28 => self * 1u32 / 28u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV29 => self * 1u32 / 29u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV30 => self * 1u32 / 30u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV31 => self * 1u32 / 31u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Mul < crate :: pac :: rcc :: vals :: Pllp > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn mul (self , rhs : crate :: pac :: rcc :: vals :: Pllp) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Pllp :: DIV2 => self * 2u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV3 => self * 3u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV4 => self * 4u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV5 => self * 5u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV6 => self * 6u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV7 => self * 7u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV8 => self * 8u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV9 => self * 9u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV10 => self * 10u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV11 => self * 11u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV12 => self * 12u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV13 => self * 13u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV14 => self * 14u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV15 => self * 15u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV16 => self * 16u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV17 => self * 17u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV18 => self * 18u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV19 => self * 19u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV20 => self * 20u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV21 => self * 21u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV22 => self * 22u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV23 => self * 23u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV24 => self * 24u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV25 => self * 25u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV26 => self * 26u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV27 => self * 27u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV28 => self * 28u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV29 => self * 29u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV30 => self * 30u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllp :: DIV31 => self * 31u32 / 1u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Div < crate :: pac :: rcc :: vals :: Pllq > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn div (self , rhs : crate :: pac :: rcc :: vals :: Pllq) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Pllq :: DIV2 => self * 1u32 / 2u32 , crate :: pac :: rcc :: vals :: Pllq :: DIV4 => self * 1u32 / 4u32 , crate :: pac :: rcc :: vals :: Pllq :: DIV6 => self * 1u32 / 6u32 , crate :: pac :: rcc :: vals :: Pllq :: DIV8 => self * 1u32 / 8u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Mul < crate :: pac :: rcc :: vals :: Pllq > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn mul (self , rhs : crate :: pac :: rcc :: vals :: Pllq) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Pllq :: DIV2 => self * 2u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllq :: DIV4 => self * 4u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllq :: DIV6 => self * 6u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllq :: DIV8 => self * 8u32 / 1u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Div < crate :: pac :: rcc :: vals :: Pllr > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn div (self , rhs : crate :: pac :: rcc :: vals :: Pllr) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Pllr :: DIV2 => self * 1u32 / 2u32 , crate :: pac :: rcc :: vals :: Pllr :: DIV4 => self * 1u32 / 4u32 , crate :: pac :: rcc :: vals :: Pllr :: DIV6 => self * 1u32 / 6u32 , crate :: pac :: rcc :: vals :: Pllr :: DIV8 => self * 1u32 / 8u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Mul < crate :: pac :: rcc :: vals :: Pllr > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn mul (self , rhs : crate :: pac :: rcc :: vals :: Pllr) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Pllr :: DIV2 => self * 2u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllr :: DIV4 => self * 4u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllr :: DIV6 => self * 6u32 / 1u32 , crate :: pac :: rcc :: vals :: Pllr :: DIV8 => self * 8u32 / 1u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Div < crate :: pac :: rcc :: vals :: Ppre > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn div (self , rhs : crate :: pac :: rcc :: vals :: Ppre) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Ppre :: DIV1 => self * 1u32 / 1u32 , crate :: pac :: rcc :: vals :: Ppre :: DIV2 => self * 1u32 / 2u32 , crate :: pac :: rcc :: vals :: Ppre :: DIV4 => self * 1u32 / 4u32 , crate :: pac :: rcc :: vals :: Ppre :: DIV8 => self * 1u32 / 8u32 , crate :: pac :: rcc :: vals :: Ppre :: DIV16 => self * 1u32 / 16u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } impl core :: ops :: Mul < crate :: pac :: rcc :: vals :: Ppre > for crate :: time :: Hertz { type Output = crate :: time :: Hertz ; fn mul (self , rhs : crate :: pac :: rcc :: vals :: Ppre) -> Self :: Output { match rhs { crate :: pac :: rcc :: vals :: Ppre :: DIV1 => self * 1u32 / 1u32 , crate :: pac :: rcc :: vals :: Ppre :: DIV2 => self * 2u32 / 1u32 , crate :: pac :: rcc :: vals :: Ppre :: DIV4 => self * 4u32 / 1u32 , crate :: pac :: rcc :: vals :: Ppre :: DIV8 => self * 8u32 / 1u32 , crate :: pac :: rcc :: vals :: Ppre :: DIV16 => self * 16u32 / 1u32 , # [allow (unreachable_patterns)] _ => unreachable ! () , } } } # [allow (non_camel_case_types)] pub mod peripheral_interrupts { pub mod ADC1 { pub type GLOBAL = crate :: interrupt :: typelevel :: ADC1_2 ; } pub mod ADC2 { pub type GLOBAL = crate :: interrupt :: typelevel :: ADC1_2 ; } pub mod ADC3 { pub type GLOBAL = crate :: interrupt :: typelevel :: ADC3 ; } pub mod ADC_COMMON { } pub mod COMP1 { pub type WKUP = crate :: interrupt :: typelevel :: COMP1_2_3 ; } pub mod COMP2 { pub type WKUP = crate :: interrupt :: typelevel :: COMP1_2_3 ; } pub mod COMP3 { pub type WKUP = crate :: interrupt :: typelevel :: COMP1_2_3 ; } pub mod COMP4 { pub type WKUP = crate :: interrupt :: typelevel :: COMP4 ; } pub mod CORDIC { pub type GLOBAL = crate :: interrupt :: typelevel :: CORDIC ; } pub mod CRC { } pub mod CRS { } pub mod DAC1 { pub type GLOBAL = crate :: interrupt :: typelevel :: TIM6_DAC ; } pub mod DAC3 { pub type GLOBAL = crate :: interrupt :: typelevel :: TIM6_DAC ; } pub mod DBGMCU { } pub mod DMA1 { pub type CH1 = crate :: interrupt :: typelevel :: DMA1_CHANNEL1 ; pub type CH2 = crate :: interrupt :: typelevel :: DMA1_CHANNEL2 ; pub type CH3 = crate :: interrupt :: typelevel :: DMA1_CHANNEL3 ; pub type CH4 = crate :: interrupt :: typelevel :: DMA1_CHANNEL4 ; pub type CH5 = crate :: interrupt :: typelevel :: DMA1_CHANNEL5 ; pub type CH6 = crate :: interrupt :: typelevel :: DMA1_CHANNEL6 ; pub type CH7 = crate :: interrupt :: typelevel :: DMA1_CHANNEL7 ; pub type CH8 = crate :: interrupt :: typelevel :: DMA1_CHANNEL8 ; } pub mod DMA2 { pub type CH1 = crate :: interrupt :: typelevel :: DMA2_CHANNEL1 ; pub type CH2 = crate :: interrupt :: typelevel :: DMA2_CHANNEL2 ; pub type CH3 = crate :: interrupt :: typelevel :: DMA2_CHANNEL3 ; pub type CH4 = crate :: interrupt :: typelevel :: DMA2_CHANNEL4 ; pub type CH5 = crate :: interrupt :: typelevel :: DMA2_CHANNEL5 ; pub type CH6 = crate :: interrupt :: typelevel :: DMA2_CHANNEL6 ; pub type CH7 = crate :: interrupt :: typelevel :: DMA2_CHANNEL7 ; pub type CH8 = crate :: interrupt :: typelevel :: DMA2_CHANNEL8 ; } pub mod DMAMUX1 { pub type OVR = crate :: interrupt :: typelevel :: DMAMUX_OVR ; } pub mod EXTI { pub type EXTI0 = crate :: interrupt :: typelevel :: EXTI0 ; pub type EXTI1 = crate :: interrupt :: typelevel :: EXTI1 ; pub type EXTI10 = crate :: interrupt :: typelevel :: EXTI15_10 ; pub type EXTI11 = crate :: interrupt :: typelevel :: EXTI15_10 ; pub type EXTI12 = crate :: interrupt :: typelevel :: EXTI15_10 ; pub type EXTI13 = crate :: interrupt :: typelevel :: EXTI15_10 ; pub type EXTI14 = crate :: interrupt :: typelevel :: EXTI15_10 ; pub type EXTI15 = crate :: interrupt :: typelevel :: EXTI15_10 ; pub type EXTI2 = crate :: interrupt :: typelevel :: EXTI2 ; pub type EXTI3 = crate :: interrupt :: typelevel :: EXTI3 ; pub type EXTI4 = crate :: interrupt :: typelevel :: EXTI4 ; pub type EXTI5 = crate :: interrupt :: typelevel :: EXTI9_5 ; pub type EXTI6 = crate :: interrupt :: typelevel :: EXTI9_5 ; pub type EXTI7 = crate :: interrupt :: typelevel :: EXTI9_5 ; pub type EXTI8 = crate :: interrupt :: typelevel :: EXTI9_5 ; pub type EXTI9 = crate :: interrupt :: typelevel :: EXTI9_5 ; } pub mod FDCAN1 { pub type IT0 = crate :: interrupt :: typelevel :: FDCAN1_IT0 ; pub type IT1 = crate :: interrupt :: typelevel :: FDCAN1_IT1 ; } pub mod FDCAN2 { pub type IT0 = crate :: interrupt :: typelevel :: FDCAN2_IT0 ; pub type IT1 = crate :: interrupt :: typelevel :: FDCAN2_IT1 ; } pub mod FDCANRAM1 { } pub mod FDCANRAM2 { } pub mod FLASH { pub type GLOBAL = crate :: interrupt :: typelevel :: FLASH ; } pub mod FMAC { pub type GLOBAL = crate :: interrupt :: typelevel :: FMAC ; } pub mod GPIOA { } pub mod GPIOB { } pub mod GPIOC { } pub mod GPIOD { } pub mod GPIOE { } pub mod GPIOF { } pub mod GPIOG { } pub mod I2C1 { pub type ER = crate :: interrupt :: typelevel :: I2C1_ER ; pub type EV = crate :: interrupt :: typelevel :: I2C1_EV ; } pub mod I2C2 { pub type ER = crate :: interrupt :: typelevel :: I2C2_ER ; pub type EV = crate :: interrupt :: typelevel :: I2C2_EV ; } pub mod I2C3 { pub type ER = crate :: interrupt :: typelevel :: I2C3_ER ; pub type EV = crate :: interrupt :: typelevel :: I2C3_EV ; } pub mod IWDG { } pub mod LPTIM1 { pub type GLOBAL = crate :: interrupt :: typelevel :: LPTIM1 ; } pub mod LPUART1 { pub type GLOBAL = crate :: interrupt :: typelevel :: LPUART1 ; } pub mod OPAMP1 { } pub mod OPAMP2 { } pub mod OPAMP3 { } pub mod OPAMP6 { } pub mod PWR { } pub mod QUADSPI1 { pub type GLOBAL = crate :: interrupt :: typelevel :: QUADSPI ; } pub mod RCC { pub type CRS = crate :: interrupt :: typelevel :: CRS ; pub type GLOBAL = crate :: interrupt :: typelevel :: RCC ; pub type LSECSS = crate :: interrupt :: typelevel :: RTC_TAMP_LSECSS ; } pub mod RNG { pub type GLOBAL = crate :: interrupt :: typelevel :: RNG ; } pub mod RTC { pub type ALARM = crate :: interrupt :: typelevel :: RTC_ALARM ; pub type TAMP = crate :: interrupt :: typelevel :: RTC_TAMP_LSECSS ; pub type WKUP = crate :: interrupt :: typelevel :: RTC_WKUP ; } pub mod SAI1 { pub type GLOBAL = crate :: interrupt :: typelevel :: SAI1 ; } pub mod SPI1 { pub type GLOBAL = crate :: interrupt :: typelevel :: SPI1 ; } pub mod SPI2 { pub type GLOBAL = crate :: interrupt :: typelevel :: SPI2 ; } pub mod SPI3 { pub type GLOBAL = crate :: interrupt :: typelevel :: SPI3 ; } pub mod SYSCFG { } pub mod TAMP { } pub mod TIM1 { pub type BRK = crate :: interrupt :: typelevel :: TIM1_BRK_TIM15 ; pub type CC = crate :: interrupt :: typelevel :: TIM1_CC ; pub type COM = crate :: interrupt :: typelevel :: TIM1_TRG_COM_TIM17 ; pub type TRG = crate :: interrupt :: typelevel :: TIM1_TRG_COM_TIM17 ; pub type UP = crate :: interrupt :: typelevel :: TIM1_UP_TIM16 ; } pub mod TIM15 { pub type BRK = crate :: interrupt :: typelevel :: TIM1_BRK_TIM15 ; pub type CC = crate :: interrupt :: typelevel :: TIM1_BRK_TIM15 ; pub type COM = crate :: interrupt :: typelevel :: TIM1_BRK_TIM15 ; pub type TRG = crate :: interrupt :: typelevel :: TIM1_BRK_TIM15 ; pub type UP = crate :: interrupt :: typelevel :: TIM1_BRK_TIM15 ; } pub mod TIM16 { pub type BRK = crate :: interrupt :: typelevel :: TIM1_UP_TIM16 ; pub type CC = crate :: interrupt :: typelevel :: TIM1_UP_TIM16 ; pub type COM = crate :: interrupt :: typelevel :: TIM1_UP_TIM16 ; pub type TRG = crate :: interrupt :: typelevel :: TIM1_UP_TIM16 ; pub type UP = crate :: interrupt :: typelevel :: TIM1_UP_TIM16 ; } pub mod TIM17 { pub type BRK = crate :: interrupt :: typelevel :: TIM1_TRG_COM_TIM17 ; pub type CC = crate :: interrupt :: typelevel :: TIM1_TRG_COM_TIM17 ; pub type COM = crate :: interrupt :: typelevel :: TIM1_TRG_COM_TIM17 ; pub type TRG = crate :: interrupt :: typelevel :: TIM1_TRG_COM_TIM17 ; pub type UP = crate :: interrupt :: typelevel :: TIM1_TRG_COM_TIM17 ; } pub mod TIM2 { pub type BRK = crate :: interrupt :: typelevel :: TIM2 ; pub type CC = crate :: interrupt :: typelevel :: TIM2 ; pub type COM = crate :: interrupt :: typelevel :: TIM2 ; pub type TRG = crate :: interrupt :: typelevel :: TIM2 ; pub type UP = crate :: interrupt :: typelevel :: TIM2 ; } pub mod TIM20 { pub type BRK = crate :: interrupt :: typelevel :: TIM20_BRK ; pub type CC = crate :: interrupt :: typelevel :: TIM20_CC ; pub type COM = crate :: interrupt :: typelevel :: TIM20_TRG_COM ; pub type TRG = crate :: interrupt :: typelevel :: TIM20_TRG_COM ; pub type UP = crate :: interrupt :: typelevel :: TIM20_UP ; } pub mod TIM3 { pub type BRK = crate :: interrupt :: typelevel :: TIM3 ; pub type CC = crate :: interrupt :: typelevel :: TIM3 ; pub type COM = crate :: interrupt :: typelevel :: TIM3 ; pub type TRG = crate :: interrupt :: typelevel :: TIM3 ; pub type UP = crate :: interrupt :: typelevel :: TIM3 ; } pub mod TIM4 { pub type BRK = crate :: interrupt :: typelevel :: TIM4 ; pub type CC = crate :: interrupt :: typelevel :: TIM4 ; pub type COM = crate :: interrupt :: typelevel :: TIM4 ; pub type TRG = crate :: interrupt :: typelevel :: TIM4 ; pub type UP = crate :: interrupt :: typelevel :: TIM4 ; } pub mod TIM6 { pub type BRK = crate :: interrupt :: typelevel :: TIM6_DAC ; pub type CC = crate :: interrupt :: typelevel :: TIM6_DAC ; pub type COM = crate :: interrupt :: typelevel :: TIM6_DAC ; pub type TRG = crate :: interrupt :: typelevel :: TIM6_DAC ; pub type UP = crate :: interrupt :: typelevel :: TIM6_DAC ; } pub mod TIM7 { pub type BRK = crate :: interrupt :: typelevel :: TIM7 ; pub type CC = crate :: interrupt :: typelevel :: TIM7 ; pub type COM = crate :: interrupt :: typelevel :: TIM7 ; pub type TRG = crate :: interrupt :: typelevel :: TIM7 ; pub type UP = crate :: interrupt :: typelevel :: TIM7 ; } pub mod TIM8 { pub type BRK = crate :: interrupt :: typelevel :: TIM8_BRK ; pub type CC = crate :: interrupt :: typelevel :: TIM8_CC ; pub type COM = crate :: interrupt :: typelevel :: TIM8_TRG_COM ; pub type TRG = crate :: interrupt :: typelevel :: TIM8_TRG_COM ; pub type UP = crate :: interrupt :: typelevel :: TIM8_UP ; } pub mod UART4 { pub type GLOBAL = crate :: interrupt :: typelevel :: UART4 ; } pub mod UART5 { pub type GLOBAL = crate :: interrupt :: typelevel :: UART5 ; } pub mod UCPD1 { pub type GLOBAL = crate :: interrupt :: typelevel :: UCPD1 ; } pub mod UID { } pub mod USART1 { pub type GLOBAL = crate :: interrupt :: typelevel :: USART1 ; } pub mod USART2 { pub type GLOBAL = crate :: interrupt :: typelevel :: USART2 ; } pub mod USART3 { pub type GLOBAL = crate :: interrupt :: typelevel :: USART3 ; } pub mod USB { pub type HP = crate :: interrupt :: typelevel :: USB_HP ; pub type LP = crate :: interrupt :: typelevel :: USB_LP ; pub type WKUP = crate :: interrupt :: typelevel :: USBWAKEUP ; } pub mod USBRAM { } pub mod WWDG { pub type GLOBAL = crate :: interrupt :: typelevel :: WWDG ; pub type RST = crate :: interrupt :: typelevel :: WWDG ; } } pub (crate) const DMA_CHANNEL_COUNT : usize = 0usize ; pub (crate) const BDMA_CHANNEL_COUNT : usize = 16usize ; pub (crate) const GPDMA_CHANNEL_COUNT : usize = 0usize ;